<Category>
	<Snippet Name="TaroString::getAnswer">string TaroString::getAnswer(string S) {
	
}</Snippet>	<Snippet Name="AmebaDiv2::simulate">int AmebaDiv2::simulate(vector &lt;int&gt; v, int a) {
	sort(v.begin(), v.end());
	
	for (int i = 0; i &lt; v.size(); i++) {
		if (v[i] == a) a *= 2;
	}
	return a;
}</Snippet>	<Snippet Name="LongLongTripDiv2::isAble">string LongLongTripDiv2::isAble(long long d, int t, int b) {
	int x = d % b;
	if (d / b + x &lt;= t) {
		return &quot;Possible&quot;;
	} else {
		return &quot;Impossible&quot;;
	}
}</Snippet>	<Snippet Name="TorusSailingEasy::expectedTime">double TorusSailingEasy::expectedTime(int N, int M, int goalX, int goalY) {
	memset(dp, -1.0, sizeof(dp));
	sx = goalX, sy = goalY, n = N, m = M;
	double ans = solve(0, 0, 0);
	if (50000 - ans &lt; eps) return -1;
	return ans;
}</Snippet>	<Snippet Name="WakingUpEasy::countAlarms">int WakingUpEasy::countAlarms(vector &lt;int&gt; v, int s) {
	int i = 0;
	int c  = 0;
	while (s &gt; 0) {
		c++;
		s -= v[i % (int) (v.size())];
	}
	return c;
}</Snippet>	<Snippet Name="ColorfulCoinsEasy::isPossible">
string ColorfulCoinsEasy::isPossible(vector &lt;int&gt; va) {
	
	for (int i = 1; i &lt; va.size() - 1; i++) {
		v.push_back(va[i] / va[i-1] - 1);
	}
	v1.resize(20);
	if (solve(0)) {
		return &quot;Possible&quot;;
		} else return &quot;Impossible&quot;;
}</Snippet>	<Snippet Name="ColorfulCoinsEasy::isPossible">string ColorfulCoinsEasy::isPossible(vector &lt;int&gt; values) {
	vector &lt;int&gt; v;
	for (int i = 1; i &lt; values.size(); i++) {
		v.push_back(values[i] / values[i-1] - 1);
	}
	sort(v.begin(), v.end());
	for (int i = 0; i &lt; v.size(); i++) {
		if (v[i] &lt;= i) {
			return &quot;Impossible&quot;;
		}
	}
	return &quot;Possible&quot;;
}</Snippet>	<Snippet Name="WakingUp::maxSleepiness">
int WakingUp::maxSleepiness(vector &lt;int&gt; p, vector &lt;int&gt; s, vector &lt;int&gt; v, int d) {
	bool f = false, f1 = false;
	int ss = 0, ans = 0;
	for (int i = 1; i &lt;= 5000; i++) {
		ss += d;
		for (int j = 0; j &lt; s.size(); j++) {
			if (s[j] == i) {
				ss -= v[j];
				s[j] += p[j];
			}
		}
		if (ss &lt; 0) {
			f = true;
		}
		
		if (ss &gt; 0) {
			f1 = true;
		}
		
		ans = min(ans, ss);
	}
	
	if (f == true &amp;&amp; f1 == true) {
		return -ans;
	} else if (f &amp;&amp; !f1) {
		return -1;
	} else {
		return 0;
	}
		
}</Snippet>	<Snippet Name="WakingUp::maxSleepiness">int WakingUp::maxSleepiness(vector &lt;int&gt; p, vector &lt;int&gt; s, vector &lt;int&gt; v, int d) {
	bool f = false, f1 = false;
	int ss = 0, ans = 0;
	for (int i = 1; i &lt;= 2520; i++) {
		ss += d;
		for (int j = 0; j &lt; s.size(); j++) {
			if (s[j] == i) {
				ss -= v[j];
				s[j] += p[j];
			}
		}
		
		ans = min(ans, ss);
	}
	
	if (ss &lt; 0) {
		return -1;
	} 
	return max(-ans, 0);
		
}
</Snippet>	<Snippet Name="SilverbachConjecture::solve">vector &lt;int&gt; SilverbachConjecture::solve(int n) {
	for (int i = 2; i &lt; n; i++) {
		int x = i;
		int y = n - i;
		if (x == 1 || y == 1 || x == n || y == n) continue;
		bool f = false;
		for (int j = 2; j * j &lt;= x; j++) {
			if (x % j == 0) {
				f = true;
			}
		}
		
		if (f) {
			f = false;
			for (int j = 2; j * j &lt;= x; j++) {
				if (x % j == 0) {
					f = true;
				}
			}
			
			if (f) {
				vector &lt;int&gt; v;
				v.push_back(x);
				v.push_back(y);
				return v;
			}
		} else {
			continue;		
		}
	}
}</Snippet>	<Snippet Name="SlimeXSlimonadeTycoon::sell">int SlimeXSlimonadeTycoon::sell(vector &lt;int&gt; m, vector &lt;int&gt; c, int s) {
	int ans = 0, k = 0, total = 0;
	for (int i = 0; i &lt; m.size(); i++) {
		total += m[i];
		if (i + 1 &gt; s) {
			total -= m[k];
			m[k] = 0;
			k++;
		}
		
		for (int j = 0; j &lt;= i; j++) {
			ans += min(m[j], c[j]);
			c[j] -= m[j];
			if (c[j] &lt;= 0) {
				c[j] = 0;
			}
		} 
	}
	return ans;
}</Snippet>	<Snippet Name="SlimeXSlimonadeTycoon::sell">int SlimeXSlimonadeTycoon::sell(vector &lt;int&gt; morning, vector &lt;int&gt; customers, int stale_limit) {
	
}</Snippet>	<Snippet Name="MyVeryLongCake::cut">int MyVeryLongCake::cut(int n) {
	int res = n;
	
	if (n % 2 == 0) {
		res /= 2;
		while (n % 2 == 0) n /= 2;
	}
	
	for (int i = 3; i * i &lt;= n; i += 2) {
		if (n % i == 0) {
			res -= res / i;
			while (n % i == 0) n /= i;
		}
	}
	
	if (n &gt; 1) {
		res -= res / n;
	}
	
	return res;
}</Snippet>	<Snippet Name="LongWordsDiv2::find">string LongWordsDiv2::find(string s) {
	set &lt;int&gt; ss[30];
	set&lt;int&gt;::iterator it, it1;
	for (int i = 0; i &lt; s.size(); i++) {
		ss[s[i] - 'A'].insert(i);
	}
	int c = 0;
	for (int i = 0; i &lt; s.size(); i++) {
		char cc = s[i];
		c = 0;
		while (s[i] == cc) {
			i++;
			c++;
		}
		if (cc &gt;= 2) {
			return &quot;Dislikes&quot;;
		} else {
			c = 0;
		}
		i--;
	}
	for (int i = 0; i &lt; s.size(); i++) {
		for (int j = i + 1; j &lt; s.size(); j++) {
			for (it = ss[s[i] - 'A'].begin(); it != ss[s[i] - 'A'].end(); it++) {
				if (*it &lt;= i) continue;
				it1 = ss[s[j] - 'A'].upper_bound(*it);
				
				if (it1 != ss[s[j] - 'A'].end()) {
					return &quot;Dislikes&quot;;
				}
			}
		}
	}
	
	return &quot;Likes&quot;;
}</Snippet>	<Snippet Name="MovingRooksDiv2::move">string MovingRooksDiv2::move(vector &lt;int&gt; Y1, vector &lt;int&gt; Y2) {
	y = Y2;
	if (solve(0, Y1)) {
		return &quot;Possible&quot;;
	} else return &quot;Impossible&quot;;
	
}</Snippet>	<Snippet Name="FizzBuzzTurbo::counts">vector &lt;long long&gt; FizzBuzzTurbo::counts(long long a, long long b) {
	long long aa[]= {3, 5, 15};
	vector &lt;long long&gt; v;
	long long a1, b1;
	for (int i = 0; i &lt; 3; i++) {
		a1 = a;
		b1 = b;
		
		while (b1 % aa[i] != 0) {
			b1--;
		}
		
		while (a1 % aa[i] != 0) {
			a1++;
		}
		if (b1 &lt; a1) {
			v.push_back(0);
			continue;
		}
		v.push_back(1 + ((b1 - a1) / aa[i]));
	}
	v[0] -= v[2];
	v[1] -= v[2];
	return v;
}
</Snippet>	<Snippet Name="InterestingNumber::isInteresting">string InterestingNumber::isInteresting(string s) {
	int a[11];
	string M = &quot;Not interesting&quot;, N = &quot;Interesting&quot;;
	for (int i = 0; i &lt; 11; i++) a[i] = 0;
	
	for (int i = 0; i &lt; s.size(); i++) {
		a[s[i] - '0']++;
	}
	
	for (int i = 0; i &lt; 10; i++) {
		if (a[i] == 0 || a[i] == 2) {
			continue;
		}
		return M;
	}
	int d = s.size();
	for (int i = 0; i &lt; 11; i++) a[i] = 0;
	
	for (int i = 0; i &lt; d; i++) {
		int x = s[i] - '0';
		if (a[i] != 1) {
			if (i + x + 1 &gt;= s.size() || s[i + x + 1] != s[i]) {
				return M;
			}
			a[i] = 1, a[i + x + 1] = 1;
			cout &lt;&lt; s[i] &lt;&lt; &quot; &quot; &lt;&lt; s[i+x+1] &lt;&lt; endl;
		}
	}
	
	return N;
}</Snippet>	<Snippet Name="LCMSetEasy::include">string LCMSetEasy::include(vector &lt;int&gt; v, int x) {
	int t = 1;
	for (int i = 0; i &lt; v.size(); i++) {
		if (x % v[i] == 0) {
			 t = (t * v[i]) / __gcd(t, v[i]);
			 if (t &gt; x) return &quot;Impossible&quot;;
		}
	}
	if (t == x) return &quot;Possible&quot;;
	return &quot;Impossible&quot;;
}
</Snippet>	<Snippet Name="LCMSetEasy::include">string LCMSetEasy::include(vector &lt;int&gt; v, int x) {
	int t = 1;
	for (int i = 0; i &lt; v.size(); i++) {
		if (x % v[i] == 0) {
			 t = (t * v[i]) / __gcd(t, v[i]);
			 if (t &gt; x) return &quot;Impossible&quot;;
		}
	}
	if (t == x) return &quot;Possible&quot;;
	return &quot;Impossible&quot;;
}</Snippet>	<Snippet Name="ElephantDrinkingEasy::maxElephants">int ElephantDrinkingEasy::maxElephants(vector &lt;string&gt; map) {
	s = map;
	n = s.size();
	for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) vis[i][j] = 0;
	solve(0, n - 1, 0, n - 1, 0);
	return ans;
}</Snippet>	<Snippet Name="ElephantDrinkingEasy::maxElephants">int ElephantDrinkingEasy::maxElephants(vector &lt;string&gt; map) {
	s = map;
	n = s.size();
	for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) vis[i][j] = 0;
	int x = 0;
	
	for (int i = 0; i &lt; n; i++) {
		for (int j = 0; j &lt; n; j++) {
			if (vis[j][i] == 1) break;
			if (s[j][i] == 'Y') {
				for (int k = 0; k &lt;= j; k++) vis[k][i] = 1;
				x++;
				break;
			}
		}
		
		for (int j = n - 1; j &gt;= 0; j--) {
			if (vis[j][i] == 1) break;
			if (s[j][i] == 'Y') {
				for (int k = j; k &lt; n; k++) vis[k][i] = 1;
				x++;
				break;
			}
		}
	}
	for (int i = 0; i &lt; n; i++) {
		for (int j = 0; j &lt; n; j++) {
			cout &lt;&lt; vis[i][j] &lt;&lt; &quot; &quot; ;
			}
			cout &lt;&lt; endl;
			}
	solve(0, n - 1, x);
	return ans;
}</Snippet>	<Snippet Name="CandidatesSelectionEasy::sort">vector &lt;int&gt; CandidatesSelectionEasy::sort(vector &lt;string&gt; s, int x) {
	priority_queue &lt;pair&lt;char, int&gt; &gt;p;
	for (int i = 0; i &lt; s.size(); i++) {
		p.push(pair&lt;char, int&gt; (s[i][x], i));
	}
	
	vector &lt;int&gt; v;
	for (int i = 0; i &lt; s.size(); i++) {
		pair&lt;char, int&gt; p1 = p.top();
		p.pop();
		v.push_back(p1.second);
	}
	reverse(v.begin(), v.end());
	return v;
}</Snippet>	<Snippet Name="PairGameEasy::able">string PairGameEasy::able(int a, int b, int c, int d) {
	while (a &lt; c &amp;&amp; b &lt; d) {
		if (a &lt; b) {
			a += b;
		} else {
			b += a;
		}
	}
	
	if (a == c &amp;&amp; b == d) return &quot;Able to generate&quot;;
	return &quot;Not able to generate&quot;;
}</Snippet>	<Snippet Name="TwoWaysSorting::sortingMethod">string TwoWaysSorting::sortingMethod(vector &lt;string&gt; s) {
	vector &lt;string&gt; s1;
	s1 = s;
	sort(s1.begin(), s1.end());
	bool f = false;
	bool f1 = true;
	if (s == s1) f = true;
	
	for (int i = 1; i &lt; s.size(); i++) {
		if (s[i-1].size() &gt; s[i].size()) {
			f = false;
		} 
	}
	
	if (f &amp;&amp; f1) return &quot;both&quot;;
	else if (f &amp;&amp; !f1) return &quot;lexicographically&quot;;
	else if (!f &amp;&amp; f1) return &quot;lengths&quot;;
	else return &quot;none&quot;;
}</Snippet>	<Snippet Name="NumbersChallenge::MinNumber">
int NumbersChallenge::MinNumber(vector &lt;int&gt; s) {
	sort(s.begin(), s.end());
	v = s;
	n = v.size();
	
	solve(0, 0);
	for (int i = 1; i &lt; 100001; i++) {
		if (dp[i] == 0) {
			return i;
		}
	}
		
}</Snippet>	<Snippet Name="MixingColors::minColors">int MixingColors::minColors(vector &lt;int&gt; c) {
	
	vector &lt;int&gt; v;
	
	for (int i = 0; i &lt; c.size(); i++) v.push_back(0);
	for (int i = 0; i &lt; c.size(); i++) {
		int x = c[i];
		while (x != 0) {
			v[i]++;
			x /= 2;
		}
	}
	int x = *max_element(v.begin(), v.end());
	
	if (x &lt; c.size())
		return x;
	else {
		return c.size();
	}
}</Snippet>	<Snippet Name="DivideByZero::CountNumbers">int DivideByZero::CountNumbers(vector &lt;int&gt; v) {
	if (v.size() == 1) return 0;
	vector &lt;int&gt;::iterator it;
	int res = 1, ans = 0;
	bool flag;
	while (res != 0) {
		res = 0;
		flag = false;
		for (int i = 0; i &lt; v.size(); i++) {
			for (int j = 0; j &lt; v.size(); j++) {
				if (i == j) continue;
				if (v[i] &gt; v[j]) {
					find(v.begin(), v.end(), v[i] / v[j]);
					
					if (it == v.end()) {
						v.push_back(v[i]/ v[j]);
						flag = true;
						ans++;
						res++;
						break;
					}
				}
			}
			if (flag) break;
		}
	}
	
	return ans;
}</Snippet>	<Snippet Name="FibonacciDiv2::find">int FibonacciDiv2::find(int n) {
	vector &lt;int&gt; v;
	int a = 0, b = 1;
	v.push_back(0);
	v.push_back(1);
	while (a + b &lt; n) {
		v.push_back(b);
		int c = a + b;
		a = b;
		b = c;
	}
	
	v.push_back(b);
	
	int h = 0;
	
	for (int i = 0; i &lt; v.size(); i++) {
		if (h &gt; n) break;
		h = v[i];
	}
	int g = v[v.size() - 1];
	for (int i = v.size() - 1; i &gt;= 0; i--) {
		if (v[i] &lt; n) break;
		g = v[i];
	}
	
	
	return min(n - h, g - n);
	
	
		
}</Snippet>	<Snippet Name="BoxesDiv2::findSize">int BoxesDiv2::findSize(vector &lt;int&gt; v) {
	int p2[33], sum = 0;;
	p2[0] = 1;	
	for (int i = 1; i &lt; 33; i++) {
		p2[i] = p2[i-1] * 2;
	}
	
	for (int i = 0; i &lt; v.size(); i++) {
		int pos = 0;
		while (p2[pos] &lt; v[i]) pos++;
		sum += p2[pos];
	}
	
		
	int pos = 0;
	
	while(p2[pos] &lt; sum) pos++;
	
	return p2[pos];
}</Snippet>	<Snippet Name="Subsets::findSubset">int Subsets::findSubset(vector &lt;int&gt; v) {
	sort(v.begin(), v.end());
	int c = 0, cc = 0;
	for (int i = 0; i &lt; v.size(); i++) {
		if (v[i] == 1) {
			c++;
			continue;
		}
		
		if (i &gt; 0 &amp;&amp; v[i] != v[i-1]) {
			vv.push_back(pair&lt;int, int&gt;(v[i-1], cc));
			cc = 1;
		}
		
		cc++;
	}
	
	if (c == 0) return 0;
	
	if (cc) vv.push_back(pair&lt;int, int&gt; (v[v.size() - 1], cc));
	ones = c;
	ans = c - 1;
	
	solve (0, 0, 1);
	
	return ans;
		 
}</Snippet>	<Snippet Name="NoRepeatPlaylist::numPlaylists">int NoRepeatPlaylist::numPlaylists(int n, int m, int p) {
	for (int i = 0; i &lt; 110; i++) dp[i] = -1;
	p -= n;
	nn = n, mm = m, pp = p;
	int ans = solve(0);
	return ans;
}</Snippet>	<Snippet Name="BuildingHeightsEasy::minimum">int BuildingHeightsEasy::minimum(int m, vector &lt;int&gt; v) {
	int a[100]; 
	
	for (int i = 0; i &lt; 100; i++) a[i] = 0;
	
	for (int i = 0; i &lt; v.size(); i++) {
		a[v[i]]++;
	}
	
	int ans = 9999999;
	
	for (int i = 0; i &lt; 52; i++) {
		ans = min(ans, m - a[i]);
	}
	
	if (ans &lt; 0) return 0;
	else return ans;
}</Snippet></Category>
